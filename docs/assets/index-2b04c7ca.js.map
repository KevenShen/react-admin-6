{"version":3,"file":"index-2b04c7ca.js","sources":["../../node_modules/.pnpm/antd@5.3.2_moment@2.29.4_react-dom@18.2.0_react@18.2.0/node_modules/antd/es/auto-complete/index.js"],"sourcesContent":["/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nconst {\n  Option\n} = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children);\n  // ============================= Input =============================\n  let customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n  const getInputElement = customizeInput ? () => customizeInput : undefined;\n  // ============================ Options ============================\n  let optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref,\n    showArrow: false\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n  }, {\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\n// We don't care debug panel\n/* istanbul ignore next */\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nif (process.env.NODE_ENV !== 'production') {\n  AutoComplete.displayName = 'AutoComplete';\n}\nexport default RefAutoComplete;"],"names":["Option","Select","isSelectOptionOrSelectOptGroup","child","AutoComplete","props","ref","customizePrefixCls","className","popupClassName","dropdownClassName","children","dataSource","childNodes","toArray","customizeInput","isValidElement","getInputElement","optionChildren","item","React.createElement","optionValue","getPrefixCls","React.useContext","ConfigContext","prefixCls","omit","classNames","RefAutoComplete","React.forwardRef","PurePanel","genPurePanel","AutoComplete$1"],"mappings":"2FAgBA,KAAM,CACJ,OAAAA,CACF,EAAIC,EACJ,SAASC,EAA+BC,EAAO,CAC7C,OAAOA,GAASA,EAAM,OAASA,EAAM,KAAK,gBAAkBA,EAAM,KAAK,iBACzE,CACA,MAAMC,EAAe,CAACC,EAAOC,IAAQ,CACnC,KAAM,CACJ,UAAWC,EACX,UAAAC,EACA,eAAAC,EACA,kBAAAC,EACA,SAAAC,EACA,WAAAC,CACD,EAAGP,EACEQ,EAAaC,EAAQH,CAAQ,EAEnC,IAAII,EACAF,EAAW,SAAW,GAAKG,EAAeH,EAAW,CAAC,CAAC,GAAK,CAACX,EAA+BW,EAAW,CAAC,CAAC,IAC3G,CAACE,CAAc,EAAIF,GAErB,MAAMI,EAAkBF,EAAiB,IAAMA,EAAiB,OAEhE,IAAIG,EAEAL,EAAW,QAAUX,EAA+BW,EAAW,CAAC,CAAC,EACnEK,EAAiBP,EAEjBO,EAAiBN,EAAaA,EAAW,IAAIO,GAAQ,CACnD,GAAIH,EAAeG,CAAI,EACrB,OAAOA,EAET,OAAQ,OAAOA,EAAI,CACjB,IAAK,SACH,OAAoBC,EAAAA,cAAoBpB,EAAQ,CAC9C,IAAKmB,EACL,MAAOA,CACR,EAAEA,CAAI,EACT,IAAK,SACH,CACE,KAAM,CACJ,MAAOE,CACR,EAAGF,EACJ,OAAoBC,EAAAA,cAAoBpB,EAAQ,CAC9C,IAAKqB,EACL,MAAOA,CACrB,EAAeF,EAAK,IAAI,CACb,CACH,QAEE,MACH,CACF,CAAA,EAAI,CAAA,EAOP,KAAM,CACJ,aAAAG,CACJ,EAAMC,EAAAA,WAAiBC,CAAa,EAC5BC,EAAYH,EAAa,SAAUf,CAAkB,EAC3D,OAAoBa,gBAAoBnB,EAAQ,OAAO,OAAO,CAC5D,IAAKK,EACL,UAAW,EACZ,EAAEoB,EAAKrB,EAAO,CAAC,aAAc,mBAAmB,CAAC,EAAG,CACnD,UAAWoB,EACX,eAAgBhB,GAAkBC,EAClC,UAAWiB,EAAW,GAAGF,CAAS,iBAAkBjB,CAAS,EAC7D,KAAMP,EAAO,+BACjB,EAAK,CAED,gBAAAgB,CACJ,CAAG,EAAGC,CAAc,CACpB,EACMU,EAA+BC,EAAAA,WAAiBzB,CAAY,EAG5D0B,EAAYC,EAAaH,CAAe,EAC9CA,EAAgB,OAAS5B,EACzB4B,EAAgB,uCAAyCE,EAIzD,MAAAE,EAAeJ","x_google_ignoreList":[0]}